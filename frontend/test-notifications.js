#!/usr/bin/env node

/**
 * Script de test pour v√©rifier l'int√©gration des notifications
 * Ce script v√©rifie que tous les composants ont bien int√©gr√© NotificationService
 */

const fs = require('fs');
const path = require('path');

const componentsToCheck = [
  'src/components/Home.vue',
  'src/components/Carte.vue', 
  'src/components/Profile.vue',
  'src/components/Discussions.vue',
  'src/components/PostCard.vue'
];

const methodsToCheck = {
  'Home.vue': ['likePost', 'dislikePost'],
  'Carte.vue': ['likePost', 'dislikePost'],
  'Profile.vue': ['submitRating', 'updateAppointmentStatus'],
  'Discussions.vue': ['sendMessage', 'createAppointment', 'updateAppointmentStatus'],
  'PostCard.vue': ['submitComment', 'submitReply'] // D√©j√† impl√©ment√©
};

console.log('üîç V√©rification de l\'int√©gration des notifications...\n');

let allTestsPassed = true;

for (const componentPath of componentsToCheck) {
  const fullPath = path.join(__dirname, componentPath);
  const componentName = path.basename(componentPath);
  
  console.log(`üìÅ V√©rification de ${componentName}:`);
  
  try {
    const content = fs.readFileSync(fullPath, 'utf8');
    
    // V√©rifier l'import de NotificationService
    const hasImport = content.includes("import NotificationService from '../services/notificationService'") ||
                     content.includes('import NotificationService from "../services/notificationService"');
    
    if (hasImport) {
      console.log('  ‚úÖ Import NotificationService trouv√©');
    } else {
      console.log('  ‚ùå Import NotificationService manquant');
      allTestsPassed = false;
    }
    
    // V√©rifier les m√©thodes sp√©cifiques
    const methodsForComponent = methodsToCheck[componentName] || [];
    for (const method of methodsForComponent) {
      const hasNotificationTrigger = content.includes('NotificationService.triggerNotificationCheck()') &&
                                   content.includes(method);
      
      if (hasNotificationTrigger) {
        console.log(`  ‚úÖ M√©thode ${method} avec d√©clencheur de notification`);
      } else {
        console.log(`  ‚ùå M√©thode ${method} sans d√©clencheur de notification`);
        allTestsPassed = false;
      }
    }
    
  } catch (error) {
    console.log(`  ‚ùå Erreur lors de la lecture du fichier: ${error.message}`);
    allTestsPassed = false;
  }
  
  console.log('');
}

console.log('üìä R√©sum√© des tests:');
if (allTestsPassed) {
  console.log('‚úÖ Toutes les v√©rifications sont pass√©es !');
  console.log('üéâ Le syst√®me de notifications est pr√™t √† √™tre test√©.');
} else {
  console.log('‚ùå Certaines v√©rifications ont √©chou√©.');
  console.log('üîß Veuillez corriger les probl√®mes avant de tester.');
}

console.log('\nüöÄ Prochaines √©tapes:');
console.log('1. D√©marrer le serveur backend: npm run dev (dans le dossier backend)');
console.log('2. D√©marrer le frontend: npm run serve (dans le dossier frontend)');
console.log('3. Tester les interactions qui g√©n√®rent des notifications:');
console.log('   - Liker/disliker des posts');
console.log('   - Commenter/r√©pondre √† des posts'); 
console.log('   - Noter des utilisateurs');
console.log('   - Envoyer des messages');
console.log('   - Cr√©er/accepter/refuser des rendez-vous');
